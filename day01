### Eureka Discovery Server 구동

1. Spring initailzr 실행

Project: Gradle-Groovy
Language: Java
Dependencies: Eureka Server 추가

Artifact, Name, Description에 'DiscoveryServerApplication' 입력
Packaging은 Jar, Java는 17

Explore 하고 Generate

다운로드된 zip을 Eclipse에서 import-Gradle-Existing Gradle Project 선택
Project root directory를 zip 푼 경로로 지정

2. DiscoveryServerApplication.java의 package 밑에 다음 줄 추가

import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

public class DiscoveryServerApplication 위에 @EnableEurekaServer 어노테이션 추가

3. src/main/resources/application.yml 작성

server:
  port: 8761
  
eureka:
  client:
    # 유레카에 등록할지 여부. 자기 자신을 등록할 필요가 없다.
    registerWithEureka: false
    # 유레카에서 조회할지 여부. 조회해서 로직을 수행할 일이 없다.
    fetchRegistry: false

4. 실행 후 http://localhost:8761 로 접속

정상 작동 확인 후 종료, 그후 gradle 빌드로 bootjar(runnable jar)를 생성
build/libs에 jar 존재
java -jar로 실행, http://localhost:8761 로 접속


#### 2. Gateway + Backend

* Gateway

1. Spring initailzr 실행

Project: Gradle-Groovy
Language: Java
Dependencies: Eureka Discovery Client, Gateway 추가

Artifact, Name, Description에 'GatewayServerApplication' 입력
Packaging은 Jar, Java는 17

Explore 하고 Generate

다운로드된 zip을 풀고 Eclipse에서 import-Gradle-Existing Gradle Project 선택
Project root directory를 zip 푼 경로로 지정

2. GatewayServerApplication.java 파일의 package 밑에 다음 줄 추가

import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

public class GatewayServerApplication 위에 @EnableDiscoveryClient 어노테이션 추가

3. src/main/resources/application.yml 작성

server:
  port: 8001

spring:
  application:
    name: gateway-server
  cloud:
    gateway:
      routes:
        - id: backend-service
          uri: lb://backend-service
          predicates:
            - Path=/backend/**
          filters:
            - RewritePath=/backend/(?<path>.*),/$\{path}

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true


실행시켜서 8001 포트로 제대로 뜨는지 확인 -> Whitelabel Error Page(SpringBoot에서 Handler가 없으면 나는 오류)
8761에 Gateway가 등록되었는지 체크

정상 작동 확인 후 종료, 그후 gradle 빌드로 bootjar(runnable jar)를 생성
build/libs에 jar 존재
java -jar로 실행, http://localhost:8001 로 접속

* Backend Service

1. Spring initailzr 실행

Project: Gradle-Groovy
Language: Java
Dependencies: Eureka Discovery Client, Spring Web 추가

Artifact, Name, Description에 'BackendServiceApplication' 입력
Packaging은 Jar, Java는 17

Explore 하고 Generate

다운로드된 zip을 풀고 Eclipse에서 import-Gradle-Existing Gradle Project 선택
Project root directory를 zip 푼 경로로 지정

2. BackendServiceApplication.java 파일의 package 밑에 다음 줄 추가

import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

public class BackendServiceApplication 위에 @EnableDiscoveryClient 어노테이션 추가

3. 새 클래스 HelloController 추가

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
    @RequestMapping("/hello")
    public String hello() {
        return "Hello backend service";
    }
}

4. src/main/resources/application.yml 작성

server:
  port: 8002

spring:
  application:
    name: backend-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true

실행하고 localhost:8002, localhost:8002/hello 까지 접속

http://localhost:8001/backend/hello 여기까지 되면 모두 완성

gradle task에서 bootJar로 생성하여 다시 구동



##

1. Spring initailzr 실행

Project: Gradle-Groovy
Language: Java
Dependencies: Eureka Discovery Client, Spring Web, Resilience4J 추가

Artifact, Name, Description에 'CallerServerApplication' 입력
Packaging은 Jar, Java는 17

Explore 하고 Generate

다운로드된 zip을 풀고 Eclipse에서 import-Gradle-Existing Gradle Project 선택
Project root directory를 zip 푼 경로로 지정

2. build.gradle에 다음 라인 추가, Gradle-Refresh Gradle Project

implementation 'org.springframework.boot:spring-boot-starter-actuator'
implementation 'org.springframework.boot:spring-boot-starter-aop'

3. src/main/resources/application.yml 작성

server:
  port: 30000

spring:
  application:
    name: caller-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true

management:
  endpoints.web.exposure.include:
    - '*'
  endpoint.health.show-details: always
  health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10

4. RestTemplateConfig.java 추가

package com.example.CallerServerApplication;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

5. CallerController 추가

package com.example.CallerServerApplication;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
public class CallerController {
    @Autowired
    private RestTemplate restTemplate;

    @CircuitBreaker(name = "callOtherService", fallbackMethod = "fallbackMethod")
    @RequestMapping("/call")
    public String callOtherService() {
        String result = restTemplate.getForObject("http://localhost:8002/hello", String.class);
        return "Result from other service: " + result;
    }

    public String fallbackMethod(Throwable t) {
        return "Fallback response due to: " + t.getMessage();
    }
}

6. http://localhost:30000/call 로 접속

7. 모든 BackendService 종료 후 다시 http://localhost:30000/call 로 접속

(이 부분은 다시 체크)


##

1. src/main/resources/application.yml 변경

server:
  port: 0

spring:
  application:
    name: backend-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}

gradle 빌드로 jar 만들고 두개 구동, 각각 다른 포트로 실행되면 성공
http://localhost:8001/backend/hello로 다시 접속

##

1. CallerApplication.java 소스 수정

package com.example.CallerServerApplication;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
public class CallerController {
    @Autowired
    private RestTemplate restTemplate;
    
    @Autowired
    private DiscoveryClient discoveryClient;

    @CircuitBreaker(name = "callOtherService", fallbackMethod = "fallbackMethod")
    @RequestMapping("/call")
    public String callOtherService() {
        String uri = getEndPointByServiceName("backend-service");
        String result = restTemplate.getForObject(uri + "/hello", String.class);
      return "Result from other service: " + result;
    }

    public String fallbackMethod(Throwable t) {
        return "Fallback response due to: "  + t.getMessage();
    }
    
    public String getEndPointByServiceName(String serviceName)
    {
    	List<ServiceInstance> apps = discoveryClient.getInstances(serviceName);
    	if ( apps.size() > 0)
    		return apps.get(0).getUri().toString();
    	else
    		return "";
    } 
    
    
}

2. BackendService 종료/실행 후 각각 http://localhost:30000/call 로 접속



##

1. Spring initailzr 실행

Project: Gradle-Groovy
Language: Java
Dependencies: Spring Web, Eureka Discovery Client, OpenFeign, Resilience4J 추가

Artifact, Name, Description에 'FeignServerApplication' 입력
Packaging은 Jar, Java는 17

Explore 하고 Generate

다운로드된 zip을 Eclipse에서 import-Gradle-Existing Gradle Project 선택
Project root directory를 zip 푼 경로로 지정

Eclipse에서 import

2. application.yml 생성

server:
  port: 32000

spring:
  application:
    name: feign-service
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    preferIpAddress: true

3. FeignServerApplication 클래스에 @EnableFeignClients 추가

4. MyFeignClient.java 생성

package com.example.FeignServerApplication;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;

@FeignClient(name = "backend-service", fallback = MyFeignClient.MyFeignClientFallback.class) // 서비스 이름으로 호출
public interface MyFeignClient {
    @GetMapping("/hello") // 원격 서비스의 엔드포인트
    String getHello();
    
    @Component
    public class MyFeignClientFallback implements MyFeignClient {
        @Override
        public String getHello() {
            return "Fallback Resource Data"; //
        }
    }
}

5. MyService.java 생성

package com.example.FeignServerApplication;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MyService {
    private final MyFeignClient feignClient;

    @Autowired
    public MyService(MyFeignClient feignClient) {
        this.feignClient = feignClient;
    }

    public String callRemoteService() {
        return feignClient.getHello();
    }
}

5. FeignController.java 추가

package com.example.FeignServerApplication;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class FeignController {
	@Autowired
    MyService myService;
	
    @RequestMapping("/call_feign")
    public String call_feign() {
    	return myService.callRemoteService();
    }
}

http://localhost:32000/call_fein으로 접속
이후 Backend Service 종료 후 다시 접속, 정보 갱신에 30초 정도는 걸림
